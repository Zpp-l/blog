> 本文是记录博客开发过程中，使用NextJS的心得体会以及优化NextJS应用体验

## 引言
页面资源是根据页面进行按需加载，每次路由发送变化都需要加载新的资源。而在开发模式下，页面按需进行资源实时构建，影响开发体验以及调试体验。

## 发现问题
根据以往经验，开发的时候引入antd和react-markdown等外部包，并未考虑到按需引入的概念。因此在开发模式调试中，一个内容页面将近4秒的缓冲时间，严重影响开发体验。并且在打包后，依然清晰可见包的体积过大。因此开始我的探索优化的道路。

![](http://lstmforecast.top/mark/20221231095600.png)

## 提升应用体验
最直接的方法是根据影响最大的组件入手~

### 1. 组件
#### antd
作为一个完整的组件库，而我只是想用antd中的部分组件，因此，对其进行按需引入。组件库对组件本身有优化，只会引入需要的文件。而对于css文件，需要用到插件   
- ` "babel-plugin-import": "^1.13.5" `
``` js
.babelrc
{
  "presets": [
    "next/babel"
  ],
  "plugins": [
    [
      "import",
      {
        "libraryName": "antd",
        "style": true
      }
    ]
  ]
}
```
- `"next-plugin-antd-less": "^1.8.0"`
``` js
const withAntdLess = require("next-plugin-antd-less");
module.exports = withAntdLess({
  // modifyVars: { '@primary-color': '#04f' }, // optional
  lessVarsFilePath: "./src/styles/variables.less", // optional
  lessVarsFilePathAppendToEndOfContent: false, // optional
  cssLoaderOptions: {
    mode: "local",
    localIdentName: "[hash:base64:8]",
    exportLocalsConvention: "camelCase",
    exportOnlyLocals: false,
    // ...
    getLocalIdent: (context, localIdentName, localName, options) => {
      return "whatever_random_class_name";
    },
  },
  // Other Config Here...
  webpack(config) {
    return config;
  },
});
```

#### react-markdown 和 react-syntax-highlighter
虽然两个组件使用的非常方便，但是真的太**大**了。严重影响了使用体验，点击一篇文章等待半天，查找许多资料也没有找到按需引入的解决方案。
改用`next-mdx-remote` `remark-prism` `remark-external-links` `gray-matter`
1. `gray-matter`对markdown文件进行读取，分为content（内容）和data（头部标识）
2. `serialize` 方法进行序列化数据content，进行传递给组件`MDXRemote`
3. `remark-prism`作为code的样式

实际使用下来对打包的体积和启动的速度提升许多。在开发者模式下也明显等待时间减少。

![](http://lstmforecast.top/mark/20221231160827.png) 

### 优化措施
- 开启gzip压缩
	gzip优化后，压缩效果杠杠的。当然开发模式自动开启。
- 善用dynamic动态加载 [Optimize Next.js App Bundle and Improve Its Performance](https://www.syncfusion.com/blogs/post/optimize-next-js-app-bundle-improve-its-performance.aspx)
	对于处于某些状态下的组件，采用动态导入
- 使用nextjs提供的next/script优化
- next/image 优化图片资源
- next/link

关于官方文档，都有详细的介绍~ [Next.js by Vercel - The React Framework (nextjs.org)](https://nextjs.org/)
